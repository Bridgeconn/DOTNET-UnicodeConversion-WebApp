;DV_ME_Shree0709.map
;Copyright (c) 2016 BCS.

; This file was edited using TECkitMappingEditorU.exe v4.0.0.0 on 2013-05-06.
;   Conversion Type = Legacy_to_from_Unicode
;   Left-hand side font = DV_ME_Shree0709;11.25
;   Right-hand side font = Arial Unicode MS;11.25
;   Main Window Position = 0,0,1172,728
;   Left-hand side Character Map Window Position = 391,5,773,478
;   Right-hand side Character Map Window Position = 801,376,376,352

; Mapping table for DV_ME_SHREE0709 font encoding

EncodingName			"DV ME Shree 0709"
DescriptiveName		"Mapping table for DV ME Shree 0709 font encoding"
Version			"1.0"
Contact			"JohnMangam@gmail.com"
RegistrationAuthority	"BCS"
RegistrationName		"DV ME Shree 0709"

RHSFlags			(ExpectsNFD)

; README
;
; The legacy encodings DV ME Shree 0708, 0709 & 0715 are very similar to each other.
; As a result, edit in one file needs to be made in the others as well. 
; Difference in the versions mentioned above are:
; 0709 & 0715 have similar Glyph codes

; First define a bunch of things that we'll use below
Define IKAR     226  
Define NUKTA    239
Define REPH     234 
Define VERTBAR  224
Define HALANT   238

; In DV ME Shree there are two kinds of half-characters: those that also have full forms, and
; those that only have half-forms for which a full form is made by adding a vertical
; bar. The former, we need to be able to convert to Unicode because they could occur in texts, 
; but we won't ever need to reverse those (why? why not just go to the full form?)

; Half consonants that only have half-forms in the DV ME Shree font (use VERTBAR to get full form)
;                       khha    ga     nya      ana     na      sha     
Define  HConlyHForms    154     170    184      189     194     206

; Half consonants that only have half-forms in the DV ME Shree font (use VERTBAR to get full form)
; AND require special processing (since they involve multiple Unicode characters.
;                           kra     pra     sra    ksha     gna     tra     ttha
Define  HConlySpecialForms  82      90      100    213      214     216     217

; Half consonants that have half-forms and full-forms in the DV ME Shree font
; AND require special processing (since they involve multiple Unicode characters.
;                             
;Define  HCalsoSpecialForms 

; Half consonants that also have corresponding full forms
;                           Ka      kha     gha     ca  \
;                           ja      jha     ta      tha\
;                           dha     pa      pha     ba  \
;                           bha     ma      ya      la  \
;                           va      ssa     sa      lla \
;                           
Define  HCalsoFForms        168     169     171     176\
                            179     180     190     191 \
                            193     195     197     198 \
                            199     200     201     204 \
                            205     207     208     212 
                            						
; The full forms corresponding to HCalsoFForms
;                           Ka      kha     gha     ca\
;                           ja      jha     ta      tha\
;                           dha     pa      pha     ba\
;                           bha     ma      ya      la\
;                           va      ssa     sa      lla\
Define  FCalsoHForms        167     104     105     106 \
                            107     108     109     110 \
                            111     113     196     114 \
                            115     116     117     118 \
                            119     120     121     211 \
					   
; all full-consonant forms:
;              kha      gha     ca      ja      jha     ta      tha     dha     pa       
;              ba       bha     ma      ya      la      va      ssa     sa      ka
;              nga      cha     tta     ttha    dda     ddha    da      pha     ra
;              ha       lla     la          
Define  FCall  104      105     106     107     108     109     110     111     113 \
               114      115     116     117     118     119     120     121     167 \
               174      178     185     186     187     188     192     196     202 \
               209      211     215           

; all stack consonant forms:
;              ktha     tta     ttha    tthha   dda     ddha    dhdha   shca    sna
;              stra     hla     hra     dba     shta    shtha   hana    hva
;              hna      hha     yya     sra     dra     hda     ddha    dma     dya
;              hma      hya         
Define  SCall  81       83      84      85      86      87      88      98      99  \
               101      102     103     149     152     153     155     156         \
               159      210     220     243     244     246     247     248     249 \
               251      252

; all dependent vowel forms:
; though ikar is a dependent vowel, don't include it here, because it never comes *after* the
; consonant we're trying to reorder below
;                       u       uu      ikar        ruu     ru      visarga	    vertbar     a       i
Define  DepVowelAll     66      67      76          122     230     223         224        231      232

; all nasal forms
;               anusvar     chandra         chandrabindu
Define  Nall    65          233             221           

; optional post-consonantal pre-vocalic things (e.g. low Rs)
;               lowR    lowTentR    nyukta
Define PCall    80      236         NUKTA 

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 0: re-order nasals ;& remove ZWJ & ZWNJ. 
;
; Nasals need to be at the end of a syllable, not before a dependent vowel.
;
; ZWJ & ZWNJ could mean something for reverse.
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

class [N] = ( Nall )
class [DepVowel] = ( DepVowelAll )
class [SCGroup] = (SCall)

; Remove ZWJ & ZWNJ before vowels
Define ZWJ 254
Define ZWNJ 253

[SCGroup]=cons ZWJ      >   @cons
[SCGroup]=cons ZWNJ     >   @cons

ZWJ [SCGroup]=cons      >   @cons
ZWNJ [SCGroup]=cons     >   @cons

ZWJ [DepVowel]=vwl      >   @vwl
ZWNJ [DepVowel]=vwl     >   @vwl

[DepVowel]=vwl ZWJ      >   @vwl
[DepVowel]=vwl ZWNJ     >   @vwl

ZWJ  [N]=vwl     >   @vwl
ZWNJ [N]=vwl    >   @vwl

Define IkarVariants 76 79 226 227

class   [IkarVariantGroup] = ( IkarVariants )
ZWJ     [IkarVariantGroup]=vwl   >  @vwl
ZWNJ    [IkarVariantGroup]=vwl   >  @vwl

Define BINDU 65 222
class [BinduGroup] = ( BINDU )

ZWJ     [BinduGroup]=bindu       >   @bindu
ZWNJ    [BinduGroup]=bindu       >   @bindu

ZWJ     HALANT      >   HALANT
ZWNJ    HALANT      >   HALANT

[N]=nas [DepVowel]=vwl      >    @vwl @nas


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 1: convert duplicate glyphs
;
; SHREE DEV has some duplicate glyphs... We're always going to use only one 
; of the forms (the one with the lower code point value--just to have a 
; convention). But handle the case where the input data might be using the
; other.
;
; THIS pass is non-reversible
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

; some characters seems to be in the font twice. We'll normalize to one form (also unidirectional)

; Duplicates for SHREE DEV 
222     >         65    ; ansuvar
228     >         66    ; ukar    
229     >         67    ; uukar
227     >         76    ; ikar
225     >         226   ; ikar not VERTBAR REPH;
77      >         74    ; ikar reph 
78      >         75    ; ikar inverted chandrabindu
79      >         226   ; ikar
236     >         80    ; reph 
237     >         80    ; reph 
96      >         39    ; single quote
34      >         147   ; double quote
39      >         145   ; single quote
96      >         145   ; single quote
130     >         44    ; comma
150     >         45    ; hyphen  
24      >         239   ; nukta  

; fix up some infilicities in the input
; more than one nasal of a type in a row is a typo
65+     >   65      ; anusvar
233+    >   233     ; chandra
221+    >   221     ; chandrabindu

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 2: handle input data infilicities
;
; There are some half-characters which also have full forms. The half-forms 
; therefore are only meant as the first C of a CC sequence, but some writers use
; use the half-form with a following vertical bar (VERTBAR) to give the full
; form. This pass cleans that up, by converting such cases to the full forms
;
; THIS pass is non-reversable
;
; It must be separate from pass 1, too, because at least one of the characters
; there feeds this rule (there are two jh-)
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

class [HConly] = (HConlyHForms HConlySpecialForms)
class [HC]     = (HCalsoFForms)
class [FC]     = (FCalsoHForms)

; turn any half-consonant plus a following vertical bar into the corresponding
; full consonant form (unidirectional conversion)
[HC] VERTBAR    >   [FC]
[HConly]=hc VERTBAR=aakar       >   @hc @aakar      ; these have to be kept as half-c + aakar

; fix up some infilicities in the input (e.g. using aakar with ekar to make okar)
Define LowR 80
[HC]=hc LowR=lr VERTBAR=aakar    >   @hc @aakar @lr ; lowR (e.g. pra) that comes before the vertbar

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 3: positional dependent vowels
;
; Some dependent vowels are different depending on which consonant they go 
; above e.g. ekar
;
; This pass also takes care of unpacking multiple-character glyphs (e.g.
; combined ikar + reph), by breaking them down into the individual chars
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

pass(Byte)

;chars which take tent-r form of "lower r"
;               
class[tentr] = (83..88   152     153     174     178     185..188    211     215)

;diacritics which might occur between a diacritic to be adjusted and its base char
;diacritics (regular forms only) for optional [d] in contexts
;           nyukta     anusvar  lowR    reph    ukar    uukar   rikar   
class[d] = (NUKTA      65       80      REPH    66      67      230      )

236     <>  80 / [tentr] [d]* _    ; tent-r

; unpack the combined symbols: 
; CV sequences
89      <>      192 230     ; dhu
218     <>      202 66      ; ru
219     <>      202 67      ; ruu
245     <>      192 67      ; dhu
250     <>      209 230     ; kru


; Other sequences like akar & vowels

68      <>      236     66          ; tentr u
69      <>      236     67          ; tentr uu
70      <>      231     REPH        ; a reph
71      <>      231     REPH    65  ;
72      <>      232     REPH    73  ;
73      <>      232     REPH    65  ;
74      <>      227     REPH        ;
75      <>      227     REPH    65  ;
77      <>      76      REPH        ;
78      <>      76      REPH    65  ;
235     <>      REPH    65          ;


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 4: rearrange syllable for subsequent reordering rule
; 
; This is for the few ikar glyphs which have both an ikar and a reph,
; but in all other situations, these two are separated by a character.
; So rearrange this one situation so that we can feed the real reordering rule
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Byte order:
;       ikar
;       reph
;       nasal?
;       char
;
; following rule expected order:
;       ikar
;       char
;       reph
;       nasal?

pass(Byte)
; Half-consonant forms
class [HC] = ( HConlyHForms HConlySpecialForms HCalsoFForms )

; Full-consonant forms
class [FC] = ( FCall )

; Stack consonant forms
class [SC] = ( SCall )

; Nasal forms
class [N] =( Nall )

; 'C' can go immediately before vowels (thus, full-consonants and full-stacks)
class[C] = ([FC] [SC])

; optional post-consonantal things (low Rs)
class[PC] = ( PCall )

IKAR=ikar REPH?=reph [N]?=nas ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons \
        <> @ikar @cons @reph @nas

; Removed ZWJ & ZWNJ
253 ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons <> @cons
254 ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons <> @cons

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 5: rearrange syllable into Unicode order
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Byte order:
;	ikar?
;	(cons nukta? virama)*
;	cons nukta?
;	vowel?
;	reph?
;	nasal?
;
; Unicode order:
;	reph?
;	(cons nukta? virama)*
;	cons nukta?
;	(vowel | ikar)?
;	nasal?

pass(Byte)
; Half-consonant forms
class [HC] = ( HConlyHForms HConlySpecialForms HCalsoFForms )

; Full-consonant forms
class [FC] = ( FCall )

; Stack consonant forms
class [SC] = ( SCall )

; Dependent vowel forms
class [DepVowel] = ( DepVowelAll )

; Nasal forms
class [N] =( Nall )

; 'C' can go immediately before vowels (thus, full-consonants and full-stacks)
class[C] = ([FC] [SC])

; optional post-consonantal things (nukta and low rs)
class[PC] = ( PCall )

; The tricky part here is 'cons': It should include all full-consonants and other consonant clusters.

IKAR?=ikar ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons NUKTA?=nukta [DepVowel]?=vwl REPH?=reph [N]?=nas \
		<> @reph @cons @nukta @ikar @vwl @nas

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 6: map byte codes to Unicodes
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; This pass deals with "basic" byte codes; it never sees the "presentation form"
; byte codes for half forms/conjuncts/positional variants

pass(Byte_Unicode)

; define a default character for failed reverse conversions (i.e. something I'm not expecting to occur 
; in input text and which doesn't generate an actual character (like the default default does)
ByteDefault         128

ByteClass[CTL]      = ( 0 .. 31 32 )
UniClass[CTL]       = ( 0 .. 31 32 )

ByteClass[HConly]   = ( HConlyHForms )

UniClass[FConly]    = ( DEVANAGARI_LETTER_KHHA  DEVANAGARI_LETTER_GA    DEVANAGARI_LETTER_NYA   DEVANAGARI_LETTER_NNA \
                        DEVANAGARI_LETTER_NA    DEVANAGARI_LETTER_SHA)

ByteClass[HCalso]   = ( HCalsoFForms )

UniClass[FCalso]    = ( DEVANAGARI_LETTER_KA    DEVANAGARI_LETTER_KHA   DEVANAGARI_LETTER_GHA   DEVANAGARI_LETTER_CA    \
                        DEVANAGARI_LETTER_JA    DEVANAGARI_LETTER_JHA   DEVANAGARI_LETTER_TA    DEVANAGARI_LETTER_THA   \
                        DEVANAGARI_LETTER_DHA   DEVANAGARI_LETTER_PA    DEVANAGARI_LETTER_PHA   DEVANAGARI_LETTER_BA    \
                        DEVANAGARI_LETTER_BHA   DEVANAGARI_LETTER_MA    DEVANAGARI_LETTER_YA    DEVANAGARI_LETTER_LA    \
                        DEVANAGARI_LETTER_VA    DEVANAGARI_LETTER_SSA   DEVANAGARI_LETTER_SA    DEVANAGARI_LETTER_LLA)

ByteClass[OneToOneDigit] = ( \
                        48  .. 57 ) 

UniClass[OneToOneDigit]  = ( DIGIT_ZERO .. DIGIT_NINE ) 

ByteClass[OneToOnePunct] = ( \
                        33..47                      58..64                          91..95      \
                        123..126                    128                             131         \
                                                    145..148                                    \
                        150                         151                             173         \
                        175                         177                             181         \
                        183                         241                             255) 

UniClass[OneToOnePunct]  = ( \
                        EXCLAMATION_MARK            LEFT_DOUBLE_QUOTATION_MARK      NUMBER_SIGN                     \
                        DOLLAR_SIGN                 PERCENT_SIGN                    AMPERSAND                       \
                        LEFT_SINGLE_QUOTATION_MARK  LEFT_PARENTHESIS                RIGHT_PARENTHESIS               \
                        ASTERISK                    PLUS_SIGN                       COMMA                           \
                        HYPHEN_MINUS                FULL_STOP                       SOLIDUS                         \
                        COLON                       SEMICOLON                       LESS_THAN_SIGN                  \
                        EQUALS_SIGN                 GREATER_THAN_SIGN               QUESTION_MARK                   \
                        COMMERCIAL_AT               LEFT_SQUARE_BRACKET             REVERSE_SOLIDUS                 \
                        RIGHT_SQUARE_BRACKET        UP_ARROWHEAD                    LOW_LINE                        \
                        LEFT_CURLY_BRACKET          VERTICAL_LINE                   RIGHT_CURLY_BRACKET             \
                        TILDE_OPERATOR              EURO_SIGN                       LATIN_SMALL_LETTER_F_WITH_HOOK  \
                        LEFT_SINGLE_QUOTATION_MARK  RIGHT_SINGLE_QUOTATION_MARK     LEFT_DOUBLE_QUOTATION_MARK      \
                        RIGHT_DOUBLE_QUOTATION_MARK                                                                 \
                        LOW_LINE                    LOW_LINE                        HYPHEN_MINUS                    \
                        HYPHEN_MINUS                PLUS_MINUS_SIGN                 GREEK_SMALL_LETTER_MU           \
                        BULLET                      DEVANAGARI_DANDA                DOTTED_CIRCLE)


ByteClass[OneToOneCs] = ( \
                        NUKTA       223     104 \
                        105         106     107 \
                        108         109     110 \
                        111         113     114 \
                        115         116     117 \
                        118         119     120 \
                        121         167     174 \
                        178         185     186 \
                        187         188     192 \
                        196         202     209 \
                        211         215) 

UniClass[OneToOneCs]  = ( \
                        DEVANAGARI_SIGN_NUKTA   DEVANAGARI_SIGN_VISARGA DEVANAGARI_LETTER_KHA    \
                        DEVANAGARI_LETTER_GHA   DEVANAGARI_LETTER_CA    DEVANAGARI_LETTER_JA     \
                        DEVANAGARI_LETTER_JHA   DEVANAGARI_LETTER_TA    DEVANAGARI_LETTER_THA    \
                        DEVANAGARI_LETTER_DHA   DEVANAGARI_LETTER_PA    DEVANAGARI_LETTER_BA     \
                        DEVANAGARI_LETTER_BHA   DEVANAGARI_LETTER_MA    DEVANAGARI_LETTER_YA     \
                        DEVANAGARI_LETTER_LA    DEVANAGARI_LETTER_VA    DEVANAGARI_LETTER_SSA    \
                        DEVANAGARI_LETTER_SA    DEVANAGARI_LETTER_KA    DEVANAGARI_LETTER_NGA    \
                        DEVANAGARI_LETTER_CHA   DEVANAGARI_LETTER_TTA   DEVANAGARI_LETTER_TTHA   \
                        DEVANAGARI_LETTER_DDA   DEVANAGARI_LETTER_DDHA  DEVANAGARI_LETTER_DA     \
                        DEVANAGARI_LETTER_PHA   DEVANAGARI_LETTER_RA    DEVANAGARI_LETTER_HA     \
                        DEVANAGARI_LETTER_LLA   DEVANAGARI_LETTER_LA)

; Combining VERTBAR gives new vowels
VERTBAR 231 <>  DEVANAGARI_VOWEL_SIGN_O
VERTBAR 232 <>  DEVANAGARI_VOWEL_SIGN_AU
VERTBAR 233 <>  DEVANAGARI_VOWEL_SIGN_CANDRA_O

ByteClass[OneToOneVs] = ( \
                        112     65      66  \
                        67      76      79  \
                        122     161     162 \
                        163     164     165 \
                        166     221     223 \
                        224     230     231 \
                        232     233     235 \
                        226     227     242)

UniClass[OneToOneVs]  = ( \
                        DEVANAGARI_SIGN_AVAGRAHA            DEVANAGARI_SIGN_ANUSVARA        DEVANAGARI_VOWEL_SIGN_U                 \
                        DEVANAGARI_VOWEL_SIGN_UU            DEVANAGARI_VOWEL_SIGN_II        DEVANAGARI_VOWEL_SIGN_I                 \
                        DEVANAGARI_VOWEL_SIGN_VOCALIC_RR    DEVANAGARI_LETTER_A             DEVANAGARI_LETTER_I                     \
                        DEVANAGARI_LETTER_U                 DEVANAGARI_LETTER_UU            DEVANAGARI_LETTER_E                     \
                        DEVANAGARI_LETTER_VOCALIC_R         DEVANAGARI_SIGN_CANDRABINDU     DEVANAGARI_SIGN_VISARGA                 \
                        DEVANAGARI_VOWEL_SIGN_AA            DEVANAGARI_VOWEL_SIGN_VOCALIC_R DEVANAGARI_VOWEL_SIGN_E                 \
                        DEVANAGARI_VOWEL_SIGN_AI            DEVANAGARI_VOWEL_SIGN_CANDRA_E  DEVANAGARI_SIGN_INVERTED_CANDRABINDU    \
                        DEVANAGARI_VOWEL_SIGN_I             DEVANAGARI_VOWEL_SIGN_II        DEVANAGARI_OM)

ByteClass[LowRWallahs] = ( \
                         167    104             \
                         105    106     107     \
                         108    109     110     \
                         192    111             \
                         196    115     116     \
                         117    119             \
                         120    121     209     \
                         113    114)

UniClass[LowRWallahs] = ( \
                        devanagari_letter_ka            DEVANAGARI_LETTER_KHA                               \
                        devanagari_letter_gha           DEVANAGARI_LETTER_CA         DEVANAGARI_LETTER_JA   \
                        devanagari_letter_jha           DEVANAGARI_LETTER_TA         DEVANAGARI_LETTER_THA  \
                        devanagari_letter_da            DEVANAGARI_LETTER_DHA                               \
                        devanagari_letter_pha           DEVANAGARI_LETTER_BHA        DEVANAGARI_LETTER_MA   \
                        devanagari_letter_ya            DEVANAGARI_LETTER_VA                                \
                        devanagari_letter_ssa           DEVANAGARI_LETTER_SA         DEVANAGARI_LETTER_HA   \
                        devanagari_letter_pa            DEVANAGARI_LETTER_BA)

; first do the easy ones
[CTL]               <>  [CTL]
[OneToOneDigit]     <>  [OneToOneDigit]
[OneToOnePunct]     <>  [OneToOnePunct]
[OneToOneCs]        <>  [OneToOneCs]
[OneToOneVs]        <>  [OneToOneVs]

; Normally 37 is visarga, but if it follows a digit, it is actually used as a colon.
; One conversion project also said that 37 followed by SPACE or HYPHEN_MINUS is also a COLON,
; but this maybe not be true for all projects, so it is not done here.
223 / [OneToOneDigit] _     <>  COLON
32 223                      <>  COLON
58                          <>  COLON
223                         <>  DEVANAGARI_SIGN_VISARGA

; all half-chars followed by the vertical bar are turned into full chars
[HConly] VERTBAR	       <>  [FConly]

; all the rest get the corresponding full char + virama + ZWJ
[HConly]            <	[FConly] DEVANAGARI_SIGN_VIRAMA / _ ^ZERO_WIDTH_NON_JOINER
;[HConly]           <>	[FConly] DEVANAGARI_SIGN_VIRAMA ZERO_WIDTH_JOINER
[HConly]            <>	[FConly] DEVANAGARI_SIGN_VIRAMA

; special cases that bleed the following rule
[LowRWallahs] 80    <>      [LowRWallahs] devanagari_sign_virama devanagari_letter_ra

; also have to handle the remain half-consonants that have full forms (but which weren't 
; converted in pass one to the full forms (i.e. they are bonefide half forms only with 
; no trailing vertical bar).
[HCalso]            <       [FCalso] devanagari_sign_virama / _ ^ZERO_WIDTH_NON_JOINER
;[HCalso]           <>      [FCalso] devanagari_sign_virama ZERO_WIDTH_JOINER 
;[HCalso] NUKTA     <>      [FCalso] DEVANAGARI_SIGN_NUKTA devanagari_sign_virama ZERO_WIDTH_JOINER 
[HCalso]            <>      [FCalso] devanagari_sign_virama 
[HCalso] NUKTA      <>      [FCalso] DEVANAGARI_SIGN_NUKTA devanagari_sign_virama

; now deal with all the stacks and other multiple character glyphs
241 241             <>      DEVANAGARI_DOUBLE_DANDA
254                 <>      ZERO_WIDTH_JOINER 
253                 <>      ZERO_WIDTH_NON_JOINER
80                  <>      DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
81                  <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA    
83                  <>      DEVANAGARI_LETTER_TTA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTA
84                  <>      DEVANAGARI_LETTER_TTA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTHA
85                  <>      DEVANAGARI_LETTER_TTHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTHA
86                  <>      DEVANAGARI_LETTER_DDA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDA
87                  <>      DEVANAGARI_LETTER_DDA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDHA
88                  <>      DEVANAGARI_LETTER_DDHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDHA
98                  <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_CA
99                  <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
101                 <>      DEVANAGARI_LETTER_SA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
102                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_LA
103                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
149                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_BHA
152                 <>      DEVANAGARI_LETTER_SSA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTA
153                 <>      DEVANAGARI_LETTER_SSA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTHA
155                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NNA
156                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_VA
159                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
161  VERTBAR        <>      DEVANAGARI_LETTER_AA
161  VERTBAR 231    <>      DEVANAGARI_LETTER_O     
161  VERTBAR 232    <>      DEVANAGARI_LETTER_AU
162  REPH           <>      DEVANAGARI_LETTER_II
165  231            <>      DEVANAGARI_LETTER_AI
161  VERTBAR 233    <>      DEVANAGARI_LETTER_CANDRA_O

210                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_HA
220                 <>      DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA
243                 <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
244                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
246                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DA
247                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DHA
248                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_MA
249                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA
251                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_MA
252                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA

; Half conjunctions

82 VERTBAR          <>      DEVANAGARI_LETTER_KHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA 
82                  <>      DEVANAGARI_LETTER_KHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA 

90 VERTBAR          <>      DEVANAGARI_LETTER_PA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA 
90                  <>      DEVANAGARI_LETTER_PA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA 

97 VERTBAR          <>      DEVANAGARI_LETTER_SHA
97                  <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA
100 VERTBAR         <>      DEVANAGARI_LETTER_SA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_RA 
100                 <>      DEVANAGARI_LETTER_SA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA  

203                 <>      DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA 
213                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_SSA  DEVANAGARI_SIGN_VIRAMA  
213 VERTBAR         <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_SSA  

214                 <>      DEVANAGARI_LETTER_JA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_NYA  DEVANAGARI_SIGN_VIRAMA  
214 VERTBAR         <>      DEVANAGARI_LETTER_JA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_NYA  

216                 <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_RA  DEVANAGARI_SIGN_VIRAMA  
216 VERTBAR         <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_RA  

217                 <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_TA  DEVANAGARI_SIGN_VIRAMA  
217 VERTBAR         <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_TA  

HALANT              <>      DEVANAGARI_SIGN_VIRAMA
REPH                <>      DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA
