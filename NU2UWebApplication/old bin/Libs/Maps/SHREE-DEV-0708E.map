;SHREE_DEV_0708E.map
;Copyright (c) 2016 BCS.

; This file was edited using TECkitMappingEditorU.exe v4.0.0.0 on 2013-05-06.
;   Conversion Type = Legacy_to_from_Unicode
;   Left-hand side font = SHREE-DEV-0708E;11.25
;   Right-hand side font = Arial Unicode MS;11.25
;   Main Window Position = 0,0,1172,728
;   Left-hand side Character Map Window Position = 326,203,773,478
;   Right-hand side Character Map Window Position = 583,312,730,352

; Mapping table for SHREE_DEV_0708E font encoding

EncodingName			"SHREE DEV 0708E"
DescriptiveName		"Mapping table for SHREE DEV 0708E font encoding"
Version			"1.0"
Contact			"JohnMangam@gmail.com"
RegistrationAuthority	"BCS"
RegistrationName		"SHREE DEV 0708E"

RHSFlags			(ExpectsNFD)

; README
;
; The legacy encodings SHREE DEV 0708, 0708E, 0714 & 0715 are very similar to each other.
; As a result, edit in one file needs to be made in the others as well. 
; Difference in the versions mentioned above are:
; 0708E has English digits
; 0708E, 0714 & 0715 have a common difference with 0708 version i.e., 173

; First define a bunch of things that we'll use below
Define IKAR     112  
Define NUKTA    139
Define REPH     169 
Define VERTBAR  109
Define HALANT   178

; In SHREE DEV there are two kinds of half-characters: those that also have full forms, and
; those that only have half-forms for which a full form is made by adding a vertical
; bar. The former, we need to be able to convert to Unicode because they could occur in texts, 
; but we won't ever need to reverse those (why? why not just go to the full form?)

; Half consonants that only have half-forms in the SHREE DEV font (use VERTBAR to get full form)
;                       nya   
Define  HConlyHForms    196  

; Half consonants that only have half-forms in the SHREE DEV font (use VERTBAR to get full form)
; AND require special processing (since they involve multiple Unicode characters.
;                           nyach   jhha    tta   
Define  HConlySpecialForms  35      130     206

; Half consonants that have half-forms and full-forms in the SHREE DEV font
; AND require special processing (since they involve multiple Unicode characters.
;                           kam     tra     la  
Define  HCalsoSpecialForms  153     205     249 

; Half consonants that also have corresponding full forms
;                           kka     ga      gha     cha \
;                           ja      jha     ana     tha \
;                           thha    dha     na	    pa  \
;                           pha     ba      bha	    ma  \
;                           ya      la      va	    sha \
;                           shya	  sa
Define  HCalsoFForms        187     189     191     192 \
                            193     194     202     203 \
                            207     220     221     223 \
                            226	  227     228     229 \
                            230	  235     236     237 \
                            238     241
						
; The full forms corresponding to HCalsoFForms
;                       kka     ga      gha 	cha    \
;                       ja      jha     ana 	tha    \	
;                       thha    dha     na	pa     \
;                       pha     ba      bha     ma     \
;                       ya      la      va 	sha    \
;                       shya    sa
Define  FCalsoHForms    73      74      75	77   \
                        79	     80      85	86   \
                        87      89      90	110  \
                        92	     126     94	95   \
                        96	     98      100	101  \
                        102     103 
					   
; all full-consonant forms:
;               ka kha ga gha nga cha chha ja jha ta tha da  dha  ana tha 
;               tha da dha na pa  pha ba  bha ma  ya  ra la  va  sha shya  sa  ha
Define  FCall   72 73  74 75  76  77  78   79 80  81 82  83  84   85  86 \
                87 88  89  90 110 92  126 94  95  96  97 98  100 101 102   103 104

; all stack consonant forms:
;                           lla	ksa     sra	chha	lla hna	hla hva	gnka   gnkha	gnga
;                           gngha   hna	ddha	ha	sva	ngsha   ngma    
;                           kkha	kva	thva	khra	gna
;                           jhra	tta	ttha	ththa	ddha	dhdha	tra	dra	
;				dga	dgha	dda	ddha	dna	dba	dbha	dma	dya	dva	nna
;				pra	pta	ya	shta	shtha	sra	stra	hra	hma	hya schya
;				sna		
Define  SCall	              105   106	108	131	132	134   135	136	145	146	147 \
				148	149	150	152	156	172   182 \
                            184	185	186	188	190 \
				195	197    198	199	200	201	204	208	\
				210	211	212	213	214	215	216	217	218	219	222 \
				224	225	231	239	240	242	243	245	247	248	252 \
				253
				

; all dependent vowel forms:
; though ikar is a dependent vowel, don't include it here, because it never comes *after* the
; consonant we're trying to reorder below
;                       visarga	 ii  	ai	ri	ri2	uu	aa		 e	 u 		
Define  DepVowelAll     133		 114	161	165	166	121	VERTBAR  111 119	166	

; all nasal forms
;               anusvar     chandra         chandrabindu
Define  Nall    167         176 		   177           

; optional post-consonantal pre-vocalic things (e.g. low Rs)
;               lowR    lowTentR    nyukta
Define PCall    140     151         NUKTA    ;  171 is duplicate of 140

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 0: re-order nasals & remove ZWJ & ZWNJ. 
;
; Nasals need to be at the end of a syllable, not before a dependent vowel.
;
; ZWJ & ZWNJ could mean something for reverse.
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

class [N] = ( Nall )
class [DepVowel] = ( DepVowelAll )
[N]=nas [DepVowel]=vwl      >       @vwl @nas

; Remove ZWJ & ZWNJ before vowels
Define ZWJ 36
Define ZWNJ 62

ZWJ [N]=vwl     >   @vwl
ZWNJ [N]=vwl    >   @vwl

ZWJ [DepVowel]=vwl      >   @vwl
ZWNJ [DepVowel]=vwl     >   @vwl

Define IkarVariants 112..118  123

class [IkarVariantGroup] = ( IkarVariants )
ZWJ     [IkarVariantGroup]=vwl   >  @vwl
ZWNJ    [IkarVariantGroup]=vwl   >  @vwl

Define BINDU 167

ZWJ     BINDU       >   BINDU
ZWNJ    BINDU       >   BINDU

ZWJ     HALANT      >   HALANT
ZWNJ    HALANT      >   HALANT

Define YaSpecialCs 76 78 81..84
class [YaSpecialCons] = ( YaSpecialCs )

[YaSpecialCons]=vwl ZWJ     >   @vwl
[YaSpecialCons]=vwl ZWNJ    >   @vwl

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 1: convert duplicate glyphs
;
; SHREE DEV has some duplicate glyphs... We're always going to use only one 
; of the forms (the one with the lower code point value--just to have a 
; convention). But handle the case where the input data might be using the
; other.
;
; THIS pass is non-reversible
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

; some characters seems to be in the font twice. We'll normalize to one form (also unidirectional)

; Duplicates for SHREE DEV 
123     >         112   ; ikar 
99      >         98    ; la
115     >         114   ; ii
120     >         119   ; ukar
122     >         121   ; ukar2
254     >         119   ; ukar
255     >         121   ; ukar2
168     >         167   ; bindu
180     >         151   ; lowTentR
171     >         140   ; low r
168     > 	    167   ; bindu 
181     >         139   ; nukta
  
; fix up some infilicities in the input

; more than one nasal of a type in a row is a typo
167+    >   167     ; anusvar
176+    >   176     ; chandra
177+    >   177     ; chandrabindu
111+    >   111     ; ekar

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 2: handle input data infilicities
;
; There are some half-characters which also have full forms. The half-forms 
; therefore are only meant as the first C of a CC sequence, but some writers use
; use the half-form with a following vertical bar (VERTBAR) to give the full
; form. This pass cleans that up, by converting such cases to the full forms
;
; THIS pass is non-reversable
;
; It must be separate from pass 1, too, because at least one of the characters
; there feeds this rule (there are two jh-)
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
pass(Byte)

class [HConly] = (HConlyHForms HConlySpecialForms)
class [HC]     = (HCalsoFForms)
class [FC]     = (FCalsoHForms)

; turn any half-consonant plus a following vertical bar into the corresponding
; full consonant form (unidirectional conversion)
[HC] VERTBAR    >   [FC]
153 VERTBAR     >   152      
205 VERTBAR     >   204     
249 VERTBAR     >   105 


[HConly]=hc VERTBAR=aakar       >   @hc @aakar      ; these have to be kept as half-c + aakar

; fix up some infilicities in the input (e.g. using aakar with ekar to make okar)

[HC]=hc 140=lr VERTBAR=aakar    >   @hc @aakar @lr ; lowR (e.g. pra) that comes before the vertbar

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 3: positional dependent vowels
;
; Some dependent vowels are different depending on which consonant they go 
; above e.g. ekar
;
; This pass also takes care of unpacking multiple-character glyphs (e.g.
; combined ikar + reph), by breaking them down into the individual chars
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

pass(Byte)

;chars which take tent-r form of "lower r"
;               
class[tentr] = (76  81  82  83  84  145 146 147 148 150 172 182 197 198 199 200 201 239 240)

;diacritics which might occur between a diacritic to be adjusted and its base char
;diacritics (regular forms only) for optional [d] in contexts
;           nyukta     anusvar  lowR    reph    ukar    uukar   rikar   
class[d] = (NUKTA      167      140     REPH    119     121     165      )

151     <>  140 / [tentr] [d]* _    ; tent-r

; unpack the combined symbols: 
; CV sequences

209     <>      88 165      ;
233     <>      97 119      ;
234     <>      97 121      ;
246     <>      104 165     ;

;   other sequences

91  <>  VERTBAR REPH;

;                       akar            bindu   
93              <>      111     REPH    167     ;
113             <>      IKAR    167             ;
116             <>      114     167             ;
117             <>      114     REPH            ;
118             <>      114     REPH    167     ;
124             <>      111     167             ;
125             <>      111     REPH            ;
162             <>      161     167             ;
163             <>      161     REPH            ;
164             <>      161     REPH    167     ;
170             <>      REPH    167             ;
36 109 167      <>      109     167
62 114          <>      114
174             <>      140      119             ;
175             <>      140      121             ;

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 4: rearrange syllable for subsequent reordering rule
; 
; This is for the few ikar glyphs which have both an ikar and a reph,
; but in all other situations, these two are separated by a character.
; So rearrange this one situation so that we can feed the real reordering rule
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Byte order:
;       ikar
;       reph
;       nasal?
;       char
;
; following rule expected order:
;       ikar
;       char
;       reph
;       nasal?

pass(Byte)
; Half-consonant forms
class [HC] = ( HConlyHForms HConlySpecialForms HCalsoSpecialForms HCalsoFForms )

; Full-consonant forms
class [FC] = ( FCall )

; Stack consonant forms
class [SC] = ( SCall )

; Nasal forms
class [N] =( Nall )

; 'C' can go immediately before vowels (thus, full-consonants and full-stacks)
class[C] = ([FC] [SC])

; optional post-consonantal things (low Rs)
class[PC] = ( PCall )

IKAR=ikar REPH?=reph [N]?=nas ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons \
        <> @ikar @cons @reph @nas

; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 5: rearrange syllable into Unicode order
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Byte order:
;	ikar?
;	(cons nukta? virama)*
;	cons nukta?
;	vowel?
;	reph?
;	nasal?
;
; Unicode order:
;	reph?
;	(cons nukta? virama)*
;	cons nukta?
;	(vowel | ikar)?
;	nasal?

pass(Byte)
; Half-consonant forms
class [HC] = ( HConlyHForms HConlySpecialForms HCalsoSpecialForms HCalsoFForms )

; Full-consonant forms
class [FC] = ( FCall )

; Stack consonant forms
class [SC] = ( SCall )

; Dependent vowel forms
class [DepVowel] = ( DepVowelAll )

; Nasal forms
class [N] =( Nall )

; 'C' can go immediately before vowels (thus, full-consonants and full-stacks)
class[C] = ([FC] [SC])

; optional post-consonantal things (nukta and low rs)
class[PC] = ( PCall )

; The tricky part here is 'cons': It should include all full-consonants and other consonant clusters.
IKAR?=ikar ([HC]* ([C]|[HC] VERTBAR) [PC]?)=cons NUKTA?=nukta [DepVowel]?=vwl REPH?=reph [N]?=nas \
		<> @reph @cons @nukta @ikar @vwl @nas


; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; Pass 6: map byte codes to Unicodes
; * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; This pass deals with "basic" byte codes; it never sees the "presentation form"
; byte codes for half forms/conjuncts/positional variants

pass(Byte_Unicode)

; define a default character for failed reverse conversions (i.e. something I'm not expecting to occur 
; in input text and which doesn't generate an actual character (like the default default does)
ByteDefault         128

ByteClass[CTL]      = ( 0 .. 31 32 )
UniClass[CTL]       = ( 0 .. 31 32 )

ByteClass[HConly]   = ( HConlyHForms )

UniClass[FConly]    = ( DEVANAGARI_LETTER_NYA)

ByteClass[HCalso]   = ( HCalsoFForms )

UniClass[FCalso]    = ( DEVANAGARI_LETTER_KHA   DEVANAGARI_LETTER_GA    DEVANAGARI_LETTER_GHA   DEVANAGARI_LETTER_CA    \
                        DEVANAGARI_LETTER_JA DEVANAGARI_LETTER_JHA DEVANAGARI_LETTER_NNA  DEVANAGARI_LETTER_TA  \
                        DEVANAGARI_LETTER_THA   DEVANAGARI_LETTER_DHA   DEVANAGARI_LETTER_NA    DEVANAGARI_LETTER_PA   \
                        DEVANAGARI_LETTER_PHA DEVANAGARI_LETTER_BA DEVANAGARI_LETTER_BHA DEVANAGARI_LETTER_MA  \
                        DEVANAGARI_LETTER_YA  DEVANAGARI_LETTER_LA DEVANAGARI_LETTER_VA   DEVANAGARI_LETTER_SHA   \
                        DEVANAGARI_LETTER_SSA   DEVANAGARI_LETTER_SA)

ByteClass[OneToOneDigit] = ( 48 .. 57 ) 

UniClass[OneToOneDigit]  = ( DIGIT_ZERO .. DIGIT_NINE ) 

ByteClass[OneToOnePunct] = ( \
                        33                          43                          45  \
                        59                          37                          46  \
                        63                          44                          34  \
                                                    47                          143 \
                        40                          41                          39  \
                        61                          42                              \
                        38                          58                              \
                        183) 

UniClass[OneToOnePunct]  = ( \
                        EXCLAMATION_MARK            PLUS_SIGN                       HYPHEN_MINUS \
                        SEMICOLON                   PERCENT_SIGN                    FULL_STOP \
                        QUESTION_MARK               COMMA                           LEFT_SINGLE_QUOTATION_MARK  \
                                                    SOLIDUS                         DIVISION_SIGN \
                        LEFT_PARENTHESIS            RIGHT_PARENTHESIS               RIGHT_SINGLE_QUOTATION_MARK \
                        EQUALS_SIGN                 ASTERISK\
                        DEVANAGARI_DANDA            COLON\
                        BULLET)

ByteClass[OneToOneCs] = ( \
                        133                      NUKTA                   72 \
                        73                       74                      75 \
                        76                       77                      78 \
                        79                       80                      81 \
                        82                       83                      84 \
                        85                       86                      87 \
                        88                       89                      90 \
                        92                       94                      95 \
                        96                       97                      98 \
                        100                      101                     102\
                        103                      104                     110\
                        126                      105\
                      ) 

UniClass[OneToOneCs]  = ( \
                        DEVANAGARI_SIGN_VISARGA DEVANAGARI_SIGN_NUKTA   DEVANAGARI_LETTER_KA \
                        DEVANAGARI_LETTER_KHA   DEVANAGARI_LETTER_GA    DEVANAGARI_LETTER_GHA \
                        DEVANAGARI_LETTER_NGA   DEVANAGARI_LETTER_CA    DEVANAGARI_LETTER_CHA   \
                        DEVANAGARI_LETTER_JA    DEVANAGARI_LETTER_JHA   DEVANAGARI_LETTER_TTA   \
                        DEVANAGARI_LETTER_TTHA  DEVANAGARI_LETTER_DDA   DEVANAGARI_LETTER_DDHA  \
                        DEVANAGARI_LETTER_NNA   DEVANAGARI_LETTER_TA    DEVANAGARI_LETTER_THA   \
                        DEVANAGARI_LETTER_DA    DEVANAGARI_LETTER_DHA   DEVANAGARI_LETTER_NA    \
                        DEVANAGARI_LETTER_PHA   DEVANAGARI_LETTER_BHA   DEVANAGARI_LETTER_MA    \
                        DEVANAGARI_LETTER_YA    DEVANAGARI_LETTER_RA    DEVANAGARI_LETTER_LA    \
                        DEVANAGARI_LETTER_VA    DEVANAGARI_LETTER_SHA   DEVANAGARI_LETTER_SSA   \
                        DEVANAGARI_LETTER_SA    DEVANAGARI_LETTER_HA    DEVANAGARI_LETTER_PA    \
                        DEVANAGARI_LETTER_BA    DEVANAGARI_LETTER_LLA\
                      )

; Combining VERTBAR gives new vowels
VERTBAR 111 <>  DEVANAGARI_VOWEL_SIGN_O
VERTBAR 161 <>  DEVANAGARI_VOWEL_SIGN_AU
VERTBAR 176 <>  DEVANAGARI_VOWEL_SIGN_CANDRA_O

ByteClass[OneToOneVs] = ( \
                        64  65  66  \
                        67  68  69  \
                        70  71  111 \
                        112 114 119 \
                        121 161 165 \
                        166 167 170 \
                        176 177 109 \
                        )

UniClass[OneToOneVs]  = ( \
                        DEVANAGARI_SIGN_AVAGRAHA            DEVANAGARI_LETTER_A             DEVANAGARI_LETTER_I \
                        DEVANAGARI_LETTER_U                 DEVANAGARI_LETTER_UU            DEVANAGARI_LETTER_E \
                        DEVANAGARI_LETTER_VOCALIC_R         DEVANAGARI_LETTER_VOCALIC_RR    DEVANAGARI_VOWEL_SIGN_E \
                        DEVANAGARI_VOWEL_SIGN_I             DEVANAGARI_VOWEL_SIGN_II        DEVANAGARI_VOWEL_SIGN_U \
                        DEVANAGARI_VOWEL_SIGN_UU            DEVANAGARI_VOWEL_SIGN_AI        DEVANAGARI_VOWEL_SIGN_VOCALIC_R \
                        DEVANAGARI_VOWEL_SIGN_VOCALIC_RR    DEVANAGARI_SIGN_ANUSVARA        DEVANAGARI_SIGN_INVERTED_CANDRABINDU    \
                        DEVANAGARI_VOWEL_SIGN_CANDRA_E      DEVANAGARI_SIGN_CANDRABINDU     DEVANAGARI_VOWEL_SIGN_AA    \
                      )
                    
ByteClass[LowRWallahs] = ( \
                         72     73      74  \
                         75     77      79  \
                         80     86      87  \
                         88     89      90  \
                         92     94      95  \
                         96     100     101 \
                         102    103     104 \
                         110    126 \
                         )

UniClass[LowRWallahs] = ( \
                        devanagari_letter_ka            DEVANAGARI_LETTER_KHA        DEVANAGARI_LETTER_GA   \
                        devanagari_letter_gha           DEVANAGARI_LETTER_CA         DEVANAGARI_LETTER_JA   \
                        devanagari_letter_jha           DEVANAGARI_LETTER_TA         DEVANAGARI_LETTER_THA  \
                        devanagari_letter_da            DEVANAGARI_LETTER_DHA        DEVANAGARI_LETTER_NA   \
                        devanagari_letter_pha           DEVANAGARI_LETTER_BHA        DEVANAGARI_LETTER_MA   \
                        devanagari_letter_ya            DEVANAGARI_LETTER_VA         DEVANAGARI_LETTER_SHA  \
                        devanagari_letter_ssa           DEVANAGARI_LETTER_SA         DEVANAGARI_LETTER_HA   \
                        devanagari_letter_pa            DEVANAGARI_LETTER_BA \
                        )

; first do the easy ones
[CTL]               <>  [CTL]
[OneToOneDigit]     <>  [OneToOneDigit]
[OneToOnePunct]     <>  [OneToOnePunct]
[OneToOneCs]        <>  [OneToOneCs]
[OneToOneVs]        <>  [OneToOneVs]


; Normally 37 is visarga, but if it follows a digit, it is actually used as a colon.
; One conversion project also said that 37 followed by SPACE or HYPHEN_MINUS is also a COLON,
; but this maybe not be true for all projects, so it is not done here.
133 / [OneToOneDigit] _     <>  COLON
32 133                      <>  COLON
32 58                       <>  COLON
133                         <>  DEVANAGARI_SIGN_VISARGA

; all half-chars followed by the vertical bar are turned into full chars
[HConly] VERTBAR	<>	[FConly]

; all the rest get the corresponding full char + virama + ZWJ
[HConly]            <	[FConly] DEVANAGARI_SIGN_VIRAMA / _ ^ZERO_WIDTH_NON_JOINER
;[HConly]           <>	[FConly] DEVANAGARI_SIGN_VIRAMA ZERO_WIDTH_JOINER
[HConly]            <>	[FConly] DEVANAGARI_SIGN_VIRAMA

; special cases that bleed the following rule
[LowRWallahs] 140   <>      [LowRWallahs] devanagari_sign_virama devanagari_letter_ra

; also have to handle the remain half-consonants that have full forms (but which weren't 
; converted in pass one to the full forms (i.e. they are bonefide half forms only with 
; no trailing vertical bar).
[HCalso]            <       [FCalso] devanagari_sign_virama / _ ^ZERO_WIDTH_NON_JOINER
;[HCalso]           <>      [FCalso] devanagari_sign_virama ZERO_WIDTH_JOINER 
;[HCalso] NUKTA     <>      [FCalso] DEVANAGARI_SIGN_NUKTA devanagari_sign_virama ZERO_WIDTH_JOINER 
[HCalso]            <>      [FCalso] devanagari_sign_virama 
[HCalso] NUKTA      <>      [FCalso] DEVANAGARI_SIGN_NUKTA devanagari_sign_virama

; now deal with all the stacks and other multiple character glyphs
35                  <>      DEVANAGARI_LETTER_NYA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_CA DEVANAGARI_SIGN_VIRAMA
38 38               <>      DEVANAGARI_DOUBLE_DANDA
36                  <>      ZERO_WIDTH_JOINER 
62                  <>      ZERO_WIDTH_NON_JOINER
65  VERTBAR         <>      DEVANAGARI_LETTER_AA
65  VERTBAR 111     <>      DEVANAGARI_LETTER_O     
65  VERTBAR 161     <>      DEVANAGARI_LETTER_AU
66  REPH            <>      DEVANAGARI_LETTER_II
69  111             <>      DEVANAGARI_LETTER_AI
106                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_SSA    
107                 <>      DEVANAGARI_LETTER_JA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NYA
108                 <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
130                 <>      DEVANAGARI_LETTER_JA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_JA DEVANAGARI_SIGN_VIRAMA ; ZERO_WIDTH_JOINER
131                 <>      DEVANAGARI_LETTER_CA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_CA 
132                 <>      DEVANAGARI_LETTER_LA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_LA 
134                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NNA
135                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_LA
136                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_VA
138                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA
140                 <>      DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
145                 <>      DEVANAGARI_LETTER_NGA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_KA
146                 <>      DEVANAGARI_LETTER_NGA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_KHA
147                 <>      DEVANAGARI_LETTER_NGA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_GA
148                 <>      DEVANAGARI_LETTER_NGA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_GHA
149                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
150                 <>      DEVANAGARI_LETTER_DDA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDHA
153                 <>      DEVANAGARI_LETTER_KHHA DEVANAGARI_SIGN_VIRAMA
155                 <>      DEVANAGARI_OM
156                 <>      DEVANAGARI_LETTER_SHA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_VA
172                 <>      DEVANAGARI_LETTER_NGA  DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_SSA
182                 <>      DEVANAGARI_LETTER_NGA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_MA
185                 <>      DEVANAGARI_LETTER_KA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_VA  
184                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_KA
186                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA
188                 <>      DEVANAGARI_LETTER_KHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
190                 <>      DEVANAGARI_LETTER_GA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
195                 <>      DEVANAGARI_LETTER_JHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
197                 <>      DEVANAGARI_LETTER_TTA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTA
198                 <>      DEVANAGARI_LETTER_TTA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTHA
199                 <>      DEVANAGARI_LETTER_TTHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTHA
200                 <>      DEVANAGARI_LETTER_DDA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDA
201                 <>      DEVANAGARI_LETTER_DDHA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DDHA
203                 <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA ; ZERO_WIDTH_JOINER    
204                  <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
205                 <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA
206                 <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA / _ ZERO_WIDTH_JOINER?
206 VERTBAR         <>      DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA
208                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
210                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_GA
211                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DHA
212                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DA
213                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_DHA
214                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
215                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_BA
216                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_BHA
217                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_MA
218                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA
219                 <>      DEVANAGARI_LETTER_DA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_VA
222                 <>      DEVANAGARI_LETTER_NA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
224                 <>      DEVANAGARI_LETTER_PA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
225                 <>      DEVANAGARI_LETTER_PA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA
231                 <>      DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA 
232                 <>      DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA; ZERO_WIDTH_JOINER
239                 <>      DEVANAGARI_LETTER_SSA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TTA  
240                 <>      DEVANAGARI_LETTER_SSA DEVANAGARI_SIGN_VIRAMA  DEVANAGARI_LETTER_TTHA
242                 <>      DEVANAGARI_LETTER_SA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
243                 <>      DEVANAGARI_LETTER_SA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_TA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
244                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_HA
245                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_RA
247                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_MA
248                 <>      DEVANAGARI_LETTER_HA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_YA
249                 <>      DEVANAGARI_LETTER_LLA DEVANAGARI_SIGN_VIRAMA    ; ZERO_WIDTH_JOINER
250                 <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_SSA DEVANAGARI_SIGN_VIRAMA    ; ZERO_WIDTH_JOINER
250 VERTBAR         <>      DEVANAGARI_LETTER_KA DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_SSA
251                 <>      DEVANAGARI_LETTER_SHA DEVANAGARI_SIGN_VIRAMA
252                 <>      DEVANAGARI_LETTER_SHA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_CA
253                 <>      DEVANAGARI_LETTER_SHA   DEVANAGARI_SIGN_VIRAMA DEVANAGARI_LETTER_NA
REPH                <>      DEVANAGARI_LETTER_RA DEVANAGARI_SIGN_VIRAMA
HALANT              <>      DEVANAGARI_SIGN_VIRAMA ZERO_WIDTH_NON_JOINER
HALANT              <       devanagari_sign_virama zero_width_joiner

; some clean-up for the reverse direction
45                  <       en_dash

